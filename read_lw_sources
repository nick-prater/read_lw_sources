#!/usr/bin/perl

=head1 NAME

read_lw_sources

=head1 DESCRIPTION

This is a Perl script which reads and displays Axia Livewire Channel
Advertisements, created as a tool to help understand and describe
the protocol, for which no documentation has been found.

Given that this has been developed purely from the study of real-world
network traffic, there may be errors or omissions in the way that
messages are parsed and decoded. The protocol implementation is not yet
complete, but is sufficient to be useful and provide a platform for
future development. Feedback or patches are welcome.

When run, the script will subscribe to the Livewire Channel Advertisements
multicast group, decode and display the messages as they are received,
along with debugging information to aid understanding and further
development. Various checks are incorporated to test assumptions made
when deciphering the protocol.

This project is the result of a weekend challenge to interpret the protocol,
driven by the frustation of finding it undocumented and stubbornness -
"how hard can it be" :-)

=head1 EXAMPLE

The following produces a running display of received channel advertisements,
by using the C<--list-sources> argument and discarding the test and debug
messages normally sent to stderr:
    
    $ ./read_lw_sources --list-sources 2>/dev/null
    |-----------|-------------|-------|---------------|-----------------|
    | Node Name |     Node IP | LW Ch | Channel Name  |  Multicast Addr |
    |-----------|-------------|-------|---------------|-----------------|
    | StA-Node1 | 10.1.245.60 |  6031 | PGM1          |  239.192.23.143 |
    | StB-Node1 | 10.1.246.60 |  6032 | PGM1          |  239.192.23.144 |
                               ... [snip] ...

Running the script without any arguments will display low level message
details as they are decoded.

    $ ./read_lw_sources

=head1 CONTRIBUTING

Feedback, further documentation, patches and bug reports are welcome, via
github.

=head1 MESSAGE PROTOCOL

The following is based on the understanding gained from analysing real-world
network traffic. It may be wrong - feedback or corrections are welcome.

=head2 Header

All messages start as follows:

    0x03 0x00 0x02 0x07                         [Start sequence]
    0x?? 0x?? 0x?? 0x??                         [Increments with each message]
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00     [Eight NUL padding bytes]

=head2 Phrases

The remainder of the message comprises multiple C<phrases>, each with the
following structure:

    [4-byte opcode] [1-byte data type] [n-bytes of data (operand)]

=head2 Opcodes

=over

=item ADVT

The advertisement message type. Type 1 is a full channel advertisement,
Type 2 is a summary advertisement, Types 3 and 4 are yet to be documented.

=item ADVV

A sequence number, which is incremented each time there is a change in the
channel configuration for a node.

=item ATRN

The node's display name.

=item BSID

The 'to-source' backfeed multicast address

=item FSID

The 'from-source' multicast address.

=item HWID

Set to the last two octets of the node's IPv4 address.

=item INDI

The number of command C<phrases> to follow in this section of the message.

=item INIP

The IPv4 unicast address of the node.

=item NUMS

The number of audio sources being described by the message.

=item PSID

The source's Livewire channel number.

=item PSNM

The source's presentation name.

=item PVER

The protocol version being used for the message. 

=item S001, S002...

An opcode beginning with C<S> followed by three digits (e.g. S001) inidicates
the start of a message section describing a source. The numeric part of the
opcode indicates the source number. The data payload indicates the size of
the following message section in bytes.

=item SHAB

Indicates whether a source is shareable (data = 0x01) or not (data = 0x00).
By default, sources are not shareable, meaning they can only be controlled by
one console at a time and will appear as 'listen-only' sources if assigned to
additional consoles.

=item TERM

The start of a message section describing the node ('terminal'). The data
payload indicates the size of the following section in bytes.

=item UDPC

The port being used, normally 4000.

=back

=head2 Data Types

A number of different data types are encountered, with the size and
interpretation of the subsequent data deduced as follows:

=over

=item 0x00

Single-byte unsigned integer.

=item 0x01

Four-byte word representing either a 32-bit unsigned integer (PSID,
ADVV or LPID opcodes), four-character text field (TYPE opcode), or
the four octets of a IPv4 address.

=item 0x03

A variable length text field. The first two bytes of data specify
the number of characters that follow. Strings are NUL terminated and
should be padded with NUL characters, but sometimes contain
garbage after the terminating NUL.

=item 0x06

Two-byte 16-bit unsigned integer.

=item 0x07

Single-byte unsigned integer, as per data type 0x00.

=item 0x08

Two-byte 16-bit unsigned integer, as per data type 0x06.

=item 0x09

8-bytes of data follow. In observed network traffic, these have always been
eight 0x00 NUL padding characters.

=back

=head2 Message Types

The advertisement message type is indicated by a C<ADVT> phrase.

Type 1 messages are full channel advertisements, containing details of
every source available from the transmitting node and a sequence number
which increments every time the node's channel configuration changes.

Type 2 messages are summary advertisements, indicating the number of sources
available from the transmitting node and the current sequence number,
allowing receivers to confirm that they have up-to-date channel details.

Message types 3 and 4 have been observed and appear to contain information
about channel/backfeed ownership and usage. They require further investigation
and analysis to document and decode.

=head2 Example Message - Type 1

    0x03 0x00 0x02 0x07                     [Start of Message - always the same    ]
    0xc7 0xc2 0xa0 0x60                     [Increases with each message from node ]
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 [Padding - always 8 NUL bytes          ]
                                            [Message body phrases start here       ]
    NEST 0x00 0x04                          [Unknown meaning                       ]
    PVER 0x08 0x00 0x02                     [Protocol Version 2                    ]
    ADVT 0x07 0x01                          [Advertisement Message type 1          ]
                                            [Section ends                          ] 
    TERM 0x06 0x00 0x54                     [0x54: following section has 84 bytes  ]
    INDI 0x00 0x06                          [0x06: following section has 6 phrases ]
    ADVV 0x01 0x00 0x00 0x00 0x98           [Sequence number, increments on change ]
    HWID 0x08 0xXX 0xXX                     [last two octets of node IP            ]
    INIP 0x01 0xXX 0xXX 0xXX 0xXX           [unicast IP address of node            ]
    UDPC 0x08 0x0f 0xa0                     [0x0fa0: UDP port number 4000          ]
    NUMS 0x08 0x00 0x01                     [0x01: 1 source channel                ]
    ATRN 0x03 0x00 0x20 [0xXX * 32 chars]   [0x20: 32 characters follow. Node name ]
                                            [Section ends                          ]
    S001 0x06 0x00 0x65                     [Channel 001. 0x65: 101 bytes follow   ]
    INDI 0x00 0x0b                          [0x0b: following section has 11 phrases]
    PSID 0x01 0x00 0x00 0x17 0x8f           [0x17 0x8f: Livewire Channel 6031      ]
    SHAB 0x07 0x00                          [0x00: source is not 'shareable'       ]
    FSID 0x01 0xef 0xc0 0x17 0x8f           [Source multicast address              ]
    FAST 0x07 0x02                          [Unknown meaning                       ]
    FASM 0x07 0x01                          [Unknown meaning                       ]
    BSID 0x01 0xef 0xc1 0x17 0x8f           [Backfeed multicast address            ]
    BAST 0x07 0x01                          [Unknown meaning                       ]
    BASM 0x07 0x00                          [Unknown meaning                       ]
    LPID 0x01 0x00 0x00 0x17 0x8f           [0x17 0x8f: Livewire channel 6031      ]
    STPL 0x07 0x00                          [Unknown meaning                       ]
    PSNM 0x03 0x00 0x10 [0xXX * 16 chars]   [0x10: 16 chars follow. Channel name   ]

=head2 Example Message - Type 2

    0x03 0x00 0x02 0x07                     [Start of Message - always the same    ]
    0xc8 0x43 0xe3 0x3d                     [Increases with each message from node ] 
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 [Padding - always 8 NUL bytes          ]
                                            [Message body phrases start here       ]
    NEST 0x00 0x03                          [Unknown meaning                       ]
    PVER 0x08 0x00 0x02                     [Protocol Version 2                    ]
    ADVT 0x07 0x02                          [Advertisement Message type 2          ]
    TERM 0x06 0x00 0x2d                     [0x2d: following section has 45 bytes  ]
    INDI 0x00 0x05                          [0x05: following section has 5 phrases ]
    ADVV 0x01 0x00 0x00 0x00 0x22           [Sequence number, increments on change ]
    HWID 0x08 0xXX 0xXX                     [last two octets of node IP            ]
    INIP 0x01 0xXX 0xXX 0xXX 0xXX           [unicast IP address of node            ]
    UDPC 0x08 0x0f 0xa0                     [0x0fa0: UDP port number 4000          ]
    NUMS 0x08 0x00 0x05                     [0x05: 5 source channels               ]

=head1 LICENCE

MIT License

Copyright (C) 2021 NP Broadcast Limited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut

use warnings;
use strict;
use IO::Socket::Multicast;

# Start listening to multicast Livewire Advertisements
# Address and port is fixed by Livewire
# https://en.wikipedia.org/wiki/Livewire_(networking)
my $address = '239.192.255.3';
my $port = 4001;
my $data;
my $details;

my $socket = IO::Socket::Multicast->new(
    Proto => 'udp',
    LocalPort => $port
) or die "Failed to initialise socket $!";

$socket->mcast_add(
    $address
) or die "failed to join multicast group $address $!";


# Print table of advertised sources as we receive them
if ($ARGV[0] && $ARGV[0] eq '--list-sources') {
    print_source_list_heading();
}

# Keep reading and processing messages. We read message
# all in one go. Some messages are longer than 1024 bytes
# and were being truncated, so the read buffer has been
# increased to 4096 bytes. Hopefully that is enough...
while($socket->recv($data, 4096)) {

    warn "received data from: " . $socket->peerhost() ."\n";
    parse_header();

    # Parsing routines work on the global $data variable
    # using regexes to parse it in segments and keep track of our
    # current byte position within it.
    #
    # They store pertinent details in the global $details hashref,
    # which we clear at the start of each message.
    $details = {};

    # Following the header, the message follows a consistent format,
    # comprising multiple 'phrases' with the following structure:
    # [4-byte opcode] [1-byte data type] [n-bytes of data (operand)]
    parse_payload();

    # Print advertised sources as we receive them
    if ($ARGV[0] && $ARGV[0] eq '--list-sources' && $details->{advt} == 1) {
        list_sources($details);
    }
}


sub parse_header {

    # Start of data is a fixed length
    my $expected;

    # First 4 bytes should always be the same
    $data =~ m/^(.{4})/gs;
    $expected = "\x03\x00\x02\x07";
    if ($1 ne $expected) {
        warn "expected header not received:\n";
        warn "expected: " . format_hex($expected) . "\n";
        warn "received: " . format_hex($1)  . "\n";
    }

    # Bytes 5-8 represent a value which increases with each message,
    # but haven't yet worked what the increase signifies.
    $data =~ m/(.{4})/gs;
    warn "hdr2: " . format_hex($1) . "\n";

    # Bytes 9-16 are always 0x00
    $data =~ m/(.{8})/gs;
    $expected = "\x00" x 8;
    if ($1 ne $expected) {
        warn "message bytes 8-16 do not match expected padding:\n";
        warn "expected: " . format_hex($expected) . "\n";
        warn "received: " . format_hex($1)  . "\n";
    }
}


sub parse_nest() {

    # Start of a NEST section runs until a 'TERM' operator is received
    my @nest = read_phrase();
    if ($nest[0] ne 'NEST') {
        die "expected NEST phrase not received\n";
    }
    warn "NEST: $nest[1]\n";

    # Ordering of these fields can vary
    while(1) {
        my ($opcode, $operand) = read_phrase();

        if ($opcode eq 'PVER') {
            # Protocol Version
            $details->{pver} = $operand;
            warn "PVER: $operand\n";
        }
        elsif ($opcode eq 'ADVT') {
            # Advertisement Type
            # 1 - Channel Name Advertisement
            # 2
            # 3
            # 4
            if($operand !~ m/^[1234]$/) {
                die "Unexpected advertisement type $operand\n";
            }
            $details->{advt} = $operand;
            warn "ADVT: $operand\n";
        }
        elsif ($opcode eq 'TERM') {
            # TERM operator indicates the end of the header and its
            # operant specifies how many bytes follow for the next
            # section (only the immediately following section, there may
            # be further sections to follow). We don't actually need
            # or use this information.
            last;
        }
        elsif ($opcode =~ m/^(NUMS|ADSN)/) {
            # Currently no idea what these are...
            warn "$opcode: $operand\n"
        }
        else {
            die "unknown opcode $opcode in header section\n";
        }
    }
}


sub parse_payload {

    # Each message starts with a NEST section
    parse_nest();

    # Start of variable-length message payload
    # keep iterating until all the data is consumed
    while((pos $data) < (length $data)) {

        my ($opcode, $operand) = read_phrase();

        if ($opcode =~ m/^S(\d\d\d)$/) {
            # Section header for audio channels.
            # Operand specifies number of bytes for this section,
            # but we don't currently need or use that information.
            my $channel_number = $1;
            my $channel = parse_channel($channel_number);
            $details->{channels} = [] unless $details->{channels};
            push @{$details->{channels}}, $channel;
        }
        elsif ($opcode eq 'INDI') {
            # Normal section header
            my $phrases_to_follow = $operand;
            parse_section($phrases_to_follow);
        }
        elsif ($opcode =~ m/^(\xff\xff\xff[\xff\xfe])/) {
            # Is this some kind of checksum field? Or just padding?
            # Have never seen it populated with anything other than 0x00
            my $expected = "\x00" x 8;
            if ($operand ne $expected) {
                warn "unexpected data for operator " . format_hex($opcode) . "\n";
                warn "expected: " . format_hex($expected) . "\n";
                warn "received: " . format_hex($operand)  . "\n";
            }
        }
        else {
            die "Received unknown operand $operand for section header\n";
        }
    }
}


sub parse_section {
    my $phrase_count = shift;
    while ($phrase_count) {

        my @operation = read_phrase();
        my $opcode = $operation[0];
        my $operand = $operation[1];

        if ($opcode eq 'ADVV') {
            # I think this is some kind of version number
            # maybe for the protocol, maybe some kind of sequence?
            warn "ADVV: $operand\n";
        }
        elsif ($opcode eq 'ATRN') {
            # Name of the Livewire node
            my $node_name = $operand;
            $node_name =~ s/\x00.*$//; # strip terminating NUL
            $details->{atrn} = $node_name;
            warn "ATRN: $node_name\n";
        }
        elsif ($opcode eq 'INIP') {
            # IP address of the node providing information
            $details->{inip} = $operand;
            warn "INIP: $operand\n";
        }
        elsif ($opcode =~ m/^(HWID|NUMS|UDPC|TYPE)/) {
            warn "$opcode: $operand\n";
        }
        else {
            die "unknown opcode $opcode\n";
        }

        $phrase_count --;
    }
}


sub parse_channel {
    my $channel_number = shift;
    my $channel = {
        channel_number => $channel_number
    };

    warn "-- channel $channel_number --\n";

    my @indi = read_phrase();
    if ($indi[0] ne 'INDI') {
        die "Expected INDI operator not received at start of channel\n";
    }

    my $phrase_count = $indi[1];
    while ($phrase_count) {

        my ($opcode, $operand) = read_phrase();

        if ($opcode eq 'PSID') {
            # Livewire channel number
            $channel->{psid} = $operand;
            warn "PSID: $operand\n";
        }
        elsif ($opcode eq 'PSNM') {
            # Name of the channel
            my $channel_name = $operand;

            # Clean up channel name.
            # Channel names are NUL terminated. We want to strip the NULs.
            # Some channel names contain garbage after the NUL, so strip
            # anything after the first NUL. To my mind, it's a bug for Axia
            # kit to be sending out that garbage on the network - strings
            # should be cleanly padded with NULs, but this is the real world.
            $channel_name =~ s/\x00.*$//;
            $channel->{psnm} = $channel_name;
            warn "PSNM: $channel_name\n";
        }
        elsif ($opcode eq 'FSID') {
            # 'from source' multicast address
            $channel->{fsid} = $operand;
            warn "FSID: $operand\n";
        }
        elsif ($opcode eq 'BSID') {
            # 'to source' backfeed multicast address
            $channel->{bsid} = $operand;
            warn "BSID: $operand\n";
        }
        elsif ($opcode eq 'BUSY') {
            warn "BUSY: " . format_hex($operand) . "\n";
        }
        elsif ($opcode && $opcode =~ m/^(SHAB|FAST|FASM|BAST|BASM|LPID|STPL|LABL)/) {
            # Haven't confirmed what these are yet - different source modes?
            warn "$opcode: $operand\n"
        }
        else {
            die "unknown opcode $opcode\n";
        }

        $phrase_count --;
    }

    return $channel;
}


sub read_phrase {
    $data =~ m/(....)/gs or die "failed to read opcode\n";
    my $opcode = $1;
    my $operand = read_operand($opcode);
    return ($opcode, $operand);
}


sub read_operand {
    my $opcode = shift;

    # The first byte specifies the data type, which tells
    # us how many bytes of data to read and how to interpret
    # the value.
    $data =~ m/(.)/gs or die "failed to read operand type\n";
    my $operand_type = $1;

    if ($operand_type eq "\x00" || $operand_type eq "\x07") {
        # single byte unsigned integer?
        $data =~ m/(.)/gs;
        return unpack('W', $1);
    }
    elsif ($operand_type eq "\x01") {
        # 4 bytes
        $data =~ m/(.{4})/gs;
        my $payload = $1;

        if ($opcode =~ m/^(PSID|ADVV|LPID)/) {
            # Unsigned 32 bit integer
            return unpack('N', $payload);
        }
        elsif ($opcode =~ m/^TYPE/) {
            # Four character text field
            return $payload;
        }
        else {
            # 4 octets - dotted IPv4 address
            return sprintf '%vd', $payload;
        }
    }
    elsif ($operand_type eq "\x03") {
        # Next two bytes specify length of payload
        $data =~ m/(..)/gs;
        my $bytes = unpack('n', $1);

        # Now get variable-length string payload
        $data =~ m/(.{$bytes})/gs;
        return $1;
    }
    elsif ($operand_type eq "\x06" || $operand_type eq "\x08") {
        # two byte unsigned integer
        $data =~ m/(..)/gs;
        return unpack('n', $1);
    }
    elsif ($operand_type eq "\x09") {
        # We're expecting 8 bytes of padding
        $data =~ m/(.{8})/gs;
        return $1;
    }
    else {
        die "unknown operand type: " . format_hex($operand_type) . "\n";
    }
}


sub dump_to_file {
    # Dump to file for analysis
    open my $outfile, ">", "/tmp/lw_data" or die "error opening file $!";
    binmode $outfile;
    print $outfile $data;
    close $outfile or die "error closing dump file $!";
}


sub format_hex {
    my $string = shift;
    return join " ", unpack '(H2)*', $string;
}


sub print_source_list_heading {
    print '|' . ('-' x 34) . '|' . ('-' x 17) . '|' . ('-' x 7) . '|' . ('-' x 18) . '|' . ('-' x 17) . "|\n";
    printf(
        "| %-32s | %15s | %5s | %-16s | %15s |\n",
        'Node Name',
        'Node IP',
        'LW Ch',
        'Channel Name',
        'Multicast Addr',
    );
    print '|' . ('-' x 34) . '|' . ('-' x 17) . '|' . ('-' x 7) . '|' . ('-' x 18) . '|' . ('-' x 17) . "|\n";
}


sub list_sources {
    my $details = shift;
    foreach my $channel(@{$details->{channels}}) {
        printf(
            "| %-32s | %15s | %5d | %-16s | %15s |\n",
            $details->{atrn},
            $details->{inip},
            $channel->{psid},
            $channel->{psnm},
            $channel->{fsid},
        );
    }
}
